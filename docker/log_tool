#!/usr/bin/env bash

set -e
set -u

# Script version
VERSION="0.1.0"

# Configuration
LOG_SENDER_BIN="/usr/local/bin/log-sender"
CONFIG_FILE="/etc/log-sender/config.json"
ENDPOINT="https://log-collector.example.com"
UNYT_PUB_KEY="${LOG_SENDER_UNYT_PUB_KEY:-}"
REPORT_INTERVAL="${LOG_SENDER_REPORT_INTERVAL_SECONDS:-3600}"
LOG_PATH="/var/log"

# Logging setup
LOG_TAG="log_tool"
log() {
    logger -t "$LOG_TAG" "$1"
}

# Usage help
usage() {
    cat << EOF
Usage: $0 [command] [options]

Commands:
  init      Initialize configuration
  service   Run log collection service
  help      Show this help

For command-specific help: $0 <command> --help
EOF
    exit 1
}

# Initialize command
init_command() {
    # Build the command
    local CMD=("$LOG_SENDER_BIN" init)
    
    # Add config file
    CMD+=(--config-file "$CONFIG_FILE")
    
    # Add endpoint (allow override via environment variable or command line)
    local ENDPOINT_ARG="${LOG_SENDER_ENDPOINT:-$ENDPOINT}"
    if [ $# -gt 0 ] && [[ "$1" == "--endpoint" ]]; then
        CMD+=(--endpoint "$2")
        shift 2
    else
        CMD+=(--endpoint "$ENDPOINT_ARG")
    fi
    
    # Add unyt pub key (use LOG_SENDER_UNYT_PUB_KEY if set, otherwise UNYT_PUB_KEY)
    local PUB_KEY_ARG="${LOG_SENDER_UNYT_PUB_KEY:-$UNYT_PUB_KEY}"
    if [ -n "$PUB_KEY_ARG" ]; then
        CMD+=(--unyt-pub-key "$PUB_KEY_ARG")
    else
        # If no pub key is set, check if it's provided as a command line argument
        if [ $# -gt 0 ] && [[ "$1" == "--unyt-pub-key" ]]; then
            CMD+=(--unyt-pub-key "$2")
            shift 2
        else
            # If still no pub key, show error message
            log "Error: UNYT public key required for init (set via UNYT_PUB_KEY or LOG_SENDER_UNYT_PUB_KEY or --unyt-pub-key argument)"
            exit 1
        fi
    fi
    
    # Add report interval (allow override via environment variable or command line)
    local INTERVAL_ARG="${LOG_SENDER_REPORT_INTERVAL_SECONDS:-$REPORT_INTERVAL}"
    if [ $# -gt 0 ] && [[ "$1" == "--report-interval-seconds" ]]; then
        CMD+=(--report-interval-seconds "$2")
        shift 2
    else
        CMD+=(--report-interval-seconds "$INTERVAL_ARG")
    fi
    
    # Execute the command
    "${CMD[@]}"
}

# Service command
service_command() {
    if [ ! -f "$CONFIG_FILE" ]; then
        log "Error: Config file not found: $CONFIG_FILE"
        exit 1
    fi
    
    # Use LOG_SENDER_LOG_PATH if set, otherwise default to LOG_PATH
    local REPORT_PATH="${LOG_SENDER_LOG_PATH:-$LOG_PATH}"
    
    "$LOG_SENDER_BIN" service \
        --config-file "$CONFIG_FILE" \
        --report-path "$REPORT_PATH"
}

# Main execution
case "$1" in
    init)
        shift
        init_command "$@"
        ;;
    service)
        shift
        service_command "$@"
        ;;
    help|--help|-h)
        usage
        ;;
    *)
        log "Unknown command: $1"
        usage
        ;;
esac
