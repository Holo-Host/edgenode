name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-holos-iso:
    needs: create-release
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[holos]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            holos/rust/holos-config/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Buildroot downloads
        uses: actions/cache@v4
        with:
          path: holos/dl
          key: ${{ runner.os }}-buildroot-dl-${{ hashFiles('holos/Makefile', 'holos/holos-buildroot-2025.08.config') }}

      - name: Cache Buildroot output
        uses: actions/cache@v4
        with:
          path: holos/output
          key: ${{ runner.os }}-buildroot-out-${{ hashFiles('holos/Makefile', 'holos/holos-buildroot-2025.08.config', 'holos/kernel-config-x86_64.config') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git wget unzip libncurses5-dev libssl-dev bc bison flex libelf-dev make musl-tools xorriso

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Build HolOS ISO
        run: |
          cd holos
          make iso

      - name: Upload ISO to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: holos/tmp/holos-*.iso
          asset_name: holos-${{ github.ref_name }}.iso
          asset_content_type: application/octet-stream

  build-and-push-docker-images:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        include:
          - dockerfile: "docker/Dockerfile.hc-0.5.6"
            hc_version: "0.5.6"
            backend: "default"
            dev: false
            is_default: true
            image_name: "local-edgenode-hc-0.5.6"
          - dockerfile: "docker/Dockerfile.hc-0.6.0-dev-go-pion"
            hc_version: "0.6.0"
            backend: "go-pion"
            dev: true
            is_default: false
            image_name: "local-edgenode-hc-0.6.0-dev-go-pion"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test Docker image
        run: |
          TAG_SUFFIX="hc${{ matrix.hc_version }}"
          if [[ "${{ matrix.backend }}" != "default" ]]; then
            TAG_SUFFIX="${TAG_SUFFIX}-${{ matrix.backend }}"
          fi
          if [[ "${{ matrix.dev }}" == "true" ]]; then
            TAG_SUFFIX="${TAG_SUFFIX}-dev"
          fi
          IMAGE_TAG="${{ github.ref_name }}-${TAG_SUFFIX}"
          LATEST_VERSIONED_TAG="latest-${TAG_SUFFIX}"

          # Build image using the multi-image build approach
          cd docker
          docker build --file ${{ matrix.dockerfile }} --tag "ghcr.io/holo-host/edgenode:${IMAGE_TAG}" .
          
          # Test using the multi-image test runner
          ./run_tests_multi.sh "ghcr.io/holo-host/edgenode:${IMAGE_TAG}"
          
          # Push the main image
          docker push "ghcr.io/holo-host/edgenode:${IMAGE_TAG}"

          # Handle versioned tags
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" == "v"* ]]; then
            # Push the versioned latest tag, e.g., latest-hc0.5.6
            docker tag "ghcr.io/holo-host/edgenode:${IMAGE_TAG}" "ghcr.io/holo-host/edgenode:${LATEST_VERSIONED_TAG}"
            docker push "ghcr.io/holo-host/edgenode:${LATEST_VERSIONED_TAG}"

            # If this is the default build, also tag it as 'latest'
            if [[ "${{ matrix.is_default }}" == "true" ]]; then
              docker tag "ghcr.io/holo-host/edgenode:${IMAGE_TAG}" "ghcr.io/holo-host/edgenode:latest"
              docker push "ghcr.io/holo-host/edgenode:latest"
            fi
          fi

  # New job for building and testing UNYT image (depends on hc-0.6.0 base)
  build-and-test-unyt:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-images
    if: github.ref_type == 'tag'
    permissions:
      contents: write
      packages: write
    env:
      # Use the latest hc-0.6.0-dev-go-pion image as base for unyt
      EDGENODE_HC_0_6_0_IMAGE: "ghcr.io/holo-host/edgenode:latest-hc0.6.0-go-pion-dev"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build UNYT Docker image
        run: |
          cd docker
          TAG_SUFFIX="unyt"
          IMAGE_TAG="${{ github.ref_name }}-${TAG_SUFFIX}"
          LATEST_VERSIONED_TAG="latest-${TAG_SUFFIX}"

          # Build unyt image using the hc-0.6.0-dev-go-pion base
          docker build --file Dockerfile.unyt \
            --tag "ghcr.io/holo-host/edgenode:${IMAGE_TAG}" \
            --build-arg BASE_IMAGE="ghcr.io/holo-host/edgenode:latest-hc0.6.0-go-pion-dev" .

      - name: Test UNYT Docker image
        run: |
          cd docker
          # Test using the multi-image test runner
          ./run_tests_multi.sh "ghcr.io/holo-host/edgenode:${{ github.ref_name }}-unyt"

      - name: Push UNYT Docker image
        if: success()
        run: |
          cd docker
          TAG_SUFFIX="unyt"
          IMAGE_TAG="${{ github.ref_name }}-${TAG_SUFFIX}"
          LATEST_VERSIONED_TAG="latest-${TAG_SUFFIX}"

          # Push the UNYT image
          docker push "ghcr.io/holo-host/edgenode:${IMAGE_TAG}"

          # Push the versioned latest tag
          if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" == "v"* ]]; then
            docker tag "ghcr.io/holo-host/edgenode:${IMAGE_TAG}" "ghcr.io/holo-host/edgenode:${LATEST_VERSIONED_TAG}"
            docker push "ghcr.io/holo-host/edgenode:${LATEST_VERSIONED_TAG}"
          fi

  # Comprehensive test matrix for all images
  test-all-images:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-images
    if: github.ref_type == 'tag' && contains(github.event.head_commit.message, '[test-all]')
    strategy:
      matrix:
        image:
          - "ghcr.io/holo-host/edgenode:latest-hc0.5.6"
          - "ghcr.io/holo-host/edgenode:latest-hc0.6.0-go-pion-dev"
          - "ghcr.io/holo-host/edgenode:latest-unyt"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test ${{ matrix.image }}
        run: |
          cd docker
          ./run_tests_multi.sh "${{ matrix.image }}"